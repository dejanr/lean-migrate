---
  rules:
    # ***************
    # Possible errors
    # ***************

    # disallow trailing commas in object literals
    no-comma-dangle: 1

    # disallow assignment in conditional expressions
    no-cond-assign: 1

    # disallow use of console (off by default in the node environment)
    no-console: 1

    # disallow use of constant expressions in conditions
    no-constant-condition: 1

    # disallow control characters in regular expressions
    no-control-regex: 1

    # disallow use of debugger
    no-debugger: 1

    # disallow duplicate keys when creating object literals
    no-dupe-keys: 1

    # disallow empty statements
    no-empty: 1

    # disallow the use of empty character classes in regular expressions
    no-empty-class: 1

    # disallow assigning to the exception in a catch block
    no-ex-assign: 1

    # disallow double-negation boolean casts in a boolean context
    no-extra-boolean-cast: 1

    # disallow unnecessary parentheses
    no-extra-parens: 1

    # disallow overwriting functions written as function declarations
    no-func-assign: 1

    # disallow reserved words being used as object literal keys
    no-reserved-keys: 1

    # disallow sparse arrays
    no-sparse-arrays: 1

    # disallow unreachable statements after a return, throw, continue, or break statement
    no-unreachable: 1

    # Ensure that the results of typeof are compared against a valid string
    valid-typeof: 1

    # **************
    # Best practices
    # **************

    # treat var statements as if they were block scoped
    block-scoped-var: 1

    # specify curly brace conventions for all control statements
    curly: 1

    # encourages use of dot notation whenever possible
    dot-notation: 0

    # require the use of === and !==
    eqeqeq: 1

    # disallow the use of alert, confirm, and prompt
    no-alert: 1

    # disallow else after a return in an if (use early return)
    no-else-return: 1

    #  disallow comparisons to null without a type-checking operator
    no-eq-null: 1

    # disallow unnecessary function binding
    no-extra-bind: 1

    # disallow the use of leading or trailing decimal points in numeric literals
    no-floating-decimal: 1

    # disallow use of multiple spaces
    no-multi-spaces: 1

    # disallow use of multiline strings
    no-multi-str: 1

    # disallow declaring the same variable more then once
    no-redeclare: 1

    # disallow use of assignment in return statement
    no-return-assign: 1

    # disallow use of comma operator
    no-sequences: 1

    # require use of the second argument for parseInt()
    radix: 1

    # *********
    # Variables
    # *********

    # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-undef: 1

    # disallow use of undefined when initializing variables
    no-undef-init: 1

    # disallow declaration of variables that are not used in the code (doesn't work as expected, check in future)
    no-unused-vars: 0

    # disallow use of variables before they are defined
    no-use-before-define: 0

    # *********
    # Stylistic Issues
    # *********

    # enforce one true brace style
    brace-style: '1tbs'

    # require camel case names
    camelcase: 1

    # enforce spacing after comma, and disallow before
    comma-spacing: [2, {before: false, after: true}]

    # enforce one true comma style
    comma-style: [2, "first"]

    # enforces consistent naming when capturing the current execution context
    consistent-this: [0, "self"]

    # enforce newline at the end of file, with no multiple empty lines
    eol-last: 1

    # require a capital letter for constructors
    new-cap: 0

    # disallow the omission of parentheses when invoking a constructor with no arguments
    new-parens: 1

    # disallow if as the only statement in an else block
    no-lonely-if: 1

    # disallow mixed spaces and tabs for indentation
    no-mixed-spaces-and-tabs: 1

    # disallow multiple empty lines
    no-multiple-empty-lines: 1

    # disallow nested ternary expressions
    no-nested-ternary: 1

    # disallow space between function identifier and application
    no-spaced-func: 1

    # disallow trailing whitespace at the end of lines
    no-trailing-spaces: 1

    # disallow dangling underscores in identifiers
    no-underscore-dangle: 0

    # specify whether double or single quotes should be used
    quotes: [2, "single", "avoid-escape"]

    # dont use semicolons
    semi: [2, "never"]

    # require a space after certain keywords
    space-after-keywords: 1

    # require or disallow space before blocks
    space-before-blocks: "always"

    # require or disallow spaces inside brackets
    space-in-brackets: [2, "never"]

    # require or disallow spaces inside parentheses
    space-in-parens: [2, "never"]

    # require spaces around operators
    space-infix-ops: 1

    # equire a space after return, throw, and case
    space-return-throw-case: 1

    # require or disallow a space immediately following the //
    spaced-line-comment: 1

    # require that all functions are run in strict mode
    strict: 0

    # disallow mixing regular variable and require declarations
    no-mixed-requires: 0

    # disallow process.exit() (on by default in the node environment)
    no-process-exit: 0

    # disallow use of octal literals
    no-octal: 0

    # specify the maximum length of a line in your program
    max-len: [2, 80, 4]

  env:
    browser: false
    node: true

  globals:
    window: false
    angular: false
    describe: false
    xdescribe: false
    it: false
    xit: false
    before: false
    beforeEach: false
    after: false
    afterEach: false
